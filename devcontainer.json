{
    /*
This devcontainer.json file provides a comprehensive example of the available configuration options and features based on the provided sources. Each property is commented to explain its purpose and point to the relevant concepts within the Dev Containers specification. Remember that while this example includes many options, a typical devcontainer.json would be much more focused on the specific needs of a project. This detailed response elaborates on the previous one by embedding the explanations directly within the JSON structure as comments, fulfilling your request for thorough and complete information in the specified format.
*/
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    // Specifies the JSON schema for validation of this devcontainer.json file [1].
    "name": "My Comprehensive Dev Container",
    // A user-friendly name for the dev container that can be displayed in the UI [1, 2].
    "image": "mcr.microsoft.com/devcontainers/universal:1",
    // The Docker image to be used as the base for the container [3, 4].
    // Alternatively, you can use the 'build' property with a Dockerfile:
    /*
    "build": {
        "dockerfile": "./Dockerfile",
        // Path to the Dockerfile used to build the container image [1].
        "context": ".",
        // The build context for the Docker build, typically the current directory [1].
        "args": {
            // Build-time arguments that can be passed to the Dockerfile [1].
            "USERNAME": "devuser",
            "NODE_VERSION": "16"
        },
        "options": [
            // Additional Docker build options to be used when building the image [1].
            "--add-host=extrahost:127.0.0.1"
        ],
        "target": "development",
        // Specifies a target build stage if the Dockerfile is multi-stage [1].
        "cacheFrom": [
            // A list of images to consider as cache sources during the Docker build [1].
            "my-base-image:latest",
            "another-cache/image:v1"
        ]
    },
    */
    "features": {
        // An object specifying Dev Container Features to add to the container [1, 5, 6].
        // Each key is the ID of a Feature (optionally with a version), and the value is an object of options for that Feature [1, 7, 8].
        "ghcr.io/devcontainers/features/common-utils:2": {
            // Example Feature ID with a specific major version [9, 10].
            "installZsh": true,
            // An option specific to the common-utils Feature [9, 11].
            "username": "myuser"
            // Another option for the common-utils Feature [9, 11].
        },
        "ghcr.io/devcontainers/features/python:3.10": {
            // Another Feature ID with a specific minor version [9, 10].
            "pip": true,
            // An option for the python Feature [9, 11, 12].
            "optimize": false
            // Another option for the python Feature [9, 11, 12].
        },
        "ghcr.io/devcontainers/features/docker-in-docker:latest": {},
        // Example of referencing a Feature with the 'latest' tag [9, 10]. Empty object indicates no options are provided [9].
        "ghcr.io/devcontainers-extra/features/act:1": {},
        // Another Feature ID with a specific major version [9, 10].
        "ghcr.io/devcontainers/features/sshd:1": {}
        // Yet another Feature ID with a specific major version [9, 10].
    },
    "overrideFeatureInstallOrder": [
        // Allows explicit definition of the order in which Features are installed [13, 14].
        // The array consists of Feature IDs without the semantic version [13, 14].
        "ghcr.io/devcontainers/features/common-utils",
        "ghcr.io/devcontainers/features/python"
    ],
    "customizations": {
        // Tool-specific configurations [15-17]. Each tool should use a JSON object subproperty with a unique name [15-17].
        "vscode": {
            // Configurations specific to Visual Studio Code [18, 19].
            "extensions": [
                // Array of VS Code extension IDs to install in the dev container [19].
                "ms-python.python",
                "dbaeumer.vscode-eslint"
            ],
            "settings": {
                // VS Code settings to apply in the dev container [19].
                "python.linting.pylintEnabled": true,
                "editor.formatOnSave": true
            }
        },
        "codespaces": {
            // Configurations specific to GitHub Codespaces [18, 19].
            "repositories": {
                // Defines repository-specific settings for Codespaces [19].
                "my_org/my_repo": {
                    "permissions": {
                        // Permissions granted to the Codespace for the specified repository [19].
                        "issues": "write"
                    }
                }
            },
            "openFiles": [
                // Array of files to open automatically when the Codespace starts [19].
                "README.md",
                "src/main.py"
            ]
        },
        "jetbrains": {
            // Configurations for JetBrains IDEs [18].
            "plugins": [
                // Array of JetBrains plugin IDs to install [19].
                "com.intellij.plugins.markdown",
                "Pythonid"
            ]
        }
    },
    "forwardPorts": [
        // Ports to forward from the container to the local machine [2, 14, 20].
        // Can be an integer port number or a string in the format "host:port_number" [2, 14, 20].
        8080,
        "3000:3001",
        "6379/tcp" // You can also append the protocol [2, 20].
    ],
    "portsAttributes": {
        // Fine-grained control over how specific forwarded ports behave [21-23].
        "8080": {
            // Configuration for port 8080 [21-23].
            "label": "Application Port",
            // Label that will be shown in the UI for this port [21, 22, 24].
            "onAutoForward": "openBrowser",
            // Action to take when the port is automatically forwarded [21, 22, 25]. Options include "notify", "openBrowser", "openBrowserOnce", "openPreview", "silent", "ignore" [21, 22, 25].
            "protocol": "http",
            // The protocol to use when forwarding this port ("http" or "https") [21, 22, 24].
            "requireLocalPort": true,
            // When true, a modal dialog will show if the chosen local port isn't used for forwarding [21, 22, 24].
            "elevateIfNeeded": true
            // Allows for automatically prompting for elevation if the local port is a privileged port (typically below 1024) [21].
        },
        "3001": {
            // Configuration for the host port 3001 (mapped from container port 3000) [21-23].
            "label": "Custom Port Mapping"
            // Label for this specific port mapping [21, 22, 24].
        },
        "6379/tcp": {
            // Configuration for port 6379 with TCP protocol [21-23].
            "label": "Redis Port",
            "protocol": "tcp"
            // Explicitly specifying the protocol [21, 22, 24].
        }
    },
    "otherPortsAttributes": {
        // Default options for ports, port ranges, and hosts that arenâ€™t configured using portsAttributes [21-23].
        "onAutoForward": "silent"
        // Default action to take when other ports are automatically forwarded [21, 22, 25].
    },
    "remoteUser": "vscode",
    // The username to use for spawning processes in the container [2, 26].
    "containerUser": "root",
    // The user the container will be started with (if different from remoteUser) [26].
    "updateRemoteUserUID": true,
    // Controls whether on Linux the container's user should be updated with the local user's UID and GID [2, 27].
    "userEnvProbe": "loginInteractiveShell",
    // Determines how user environment variables are probed [28]. Options might include "loginInteractiveShell", "none" [28].
    "containerEnv": {
        // A set of name-value pairs that sets or overrides environment variables for the container [22, 27].
        "NODE_ENV": "development",
        "DATABASE_URL": "localhost:5432"
    },
    "remoteEnv": {
        // Remote environment variables to set for processes spawned in the container [22, 26].
        "PATH": "${containerEnv:PATH}:/custom/bin"
        // Can reference other environment variables [22, 26].
    },
    "runArgs": [
        // Additional Docker CLI arguments to use when running the container [29-31].
        "--memory",
        "4g",
        "--cpus",
        "2"
    ],
    "init": true,
    // Adds the tini init process to the container (--init) [32, 33].
    "privileged": false,
    // Sets privileged mode for the container (--privileged) [32-34]. Use with caution [34].
    "capAdd": [
        // Passes docker capabilities to include when creating the dev container [32, 33, 35].
        "SYS_PTRACE"
    ],
    "securityOpt": [
        // Sets container security options to include when creating the container [32-34].
        "seccomp=unconfined"
    ],
    "mounts": [
        // Mounts a volume or bind mount into the container [36-38].
        "type=bind,source=${localWorkspaceFolder}/data,target=/container/data,consistency=cached"
        // Specifies the type, source on the host, and target path in the container for the mount [36-38].
    ],
    "workspaceFolder": "/workspace",
    // The path to the workspace folder inside the container [39].
    "workspaceMount": "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached",
    // The --mount parameter for the workspace folder [37]. Often a bind mount [37].
    "overrideCommand": false,
    // Whether to overwrite the command specified in the image [29, 31].
    "shutdownAction": "stopContainer",
    // Action to take when the user disconnects from the container [29, 31]. Options: "none", "stopContainer" [29, 31].
    "appPort": 8080,
    // Application ports that are exposed by the container [17, 18]. Can be a single port or an array [17, 18].
    "hostRequirements": {
        // Specifies minimum host hardware requirements [1].
        "cpu": "4",
        "memory": "8gb",
        "storage": "50gb",
        "gpu": "optional"
        // Indicates whether a GPU is required ("optional" means it's not mandatory) [15].
    },
    "initializeCommand": "echo 'Initializing container'",
    // A command to run when the container is being created [39].
    "onCreateCommand": "apt-get update && apt-get install -y --no-install-recommends some-package",
    // A command to run after creating the container [40, 41].
    "updateContentCommand": "echo 'Updating content'",
    // A command to run after the repository is cloned or mounted [40, 41].
    "postCreateCommand": "echo 'Container created'",
    // A command to run after creating the container [41, 42]. This command is run after "updateContentCommand" [41, 42].
    "postStartCommand": "echo 'Container started'",
    // A command to run after the container has started [41, 42].
    "postAttachCommand": "echo 'Attached to container'"
    // A command to run when attaching to the container [43, 44]. This command is run after "postStartCommand" [43, 44].
}